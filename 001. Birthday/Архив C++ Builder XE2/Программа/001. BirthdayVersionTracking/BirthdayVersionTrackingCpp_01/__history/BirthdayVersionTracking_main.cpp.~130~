//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "BirthdayVersionTracking_main.h"
#include <Registry.hpp>
#include <stdio.h>
#include <IBServices.hpp>

int AppMajor, AppMinor, AppRelease, AppBuild;
int VerInfo[4];
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMainForm *MainForm;
//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{
  // Добавить в автозапуск:
  TRegistry *reg = new TRegistry();

  reg->RootKey = HKEY_CURRENT_USER;
/*
  HKEY_CURRENT_USER - раздел реестра в котором находятся настройки параметров
  среды текущего пользователя(сеанса).
  На первом уровне расположены ветви (Hive Keys). На втором уровне располагаются
  разделы или ключи реестра (Registry Keys), на третьем – подразделы (Subkeys) и
  на четвертом и далее – параметры (Values).
*/
  reg->OpenKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run",true);  // открытие существующего вложенного раздела с доступом на запись

  bool regValue = reg->ValueExists(ExtractFileName(Application->ExeName));

  if(!regValue)     // проверка наличия в автозагрузке
  {
	reg->WriteString(ExtractFileName(Application->ExeName),Application->ExeName); // записать "Birthday.exe" типа REG_SZ — текстовая строка
  }

  reg->CloseKey();  // закрытие вложенного раздела

  delete reg;
  reg = NULL;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::B_DeleteClick(TObject *Sender)
{
  // Извлеч из автозапуска:
  TRegistry *reg = new TRegistry();

  reg->RootKey = HKEY_CURRENT_USER;
  reg->OpenKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run",true);
  reg->DeleteValue(ExtractFileName(Application->ExeName));                      // "Birthday.exe" типа REG_SZ — текстовая строка
  reg->CloseKey();

  delete reg;
  reg = NULL;
}
//---------------------------------------------------------------------------
/*
Запрос: сравнение версий программ c++ builder
http://rxlib.ru/forums/index.php?act=ST&f=3&t=2305&s=ded848ac6abe6afafadeb852a5733406
*/
bool __fastcall TMainForm::GetAppVersion(char* FileName, int* VerInfo)  // получение версии файла
{
  if(!FileExists(FileName))                       // Проверяем наличие файла
  {
	return false;                               // Если нет ф-ция неуспешна
  }

  DWORD FSize = GetFileVersionInfoSize(FileName,NULL);  // размер инфы о версии файла

  if(FSize==0)
  {
	return false;                               // Если 0 функция неуспешна
  }

  LPVOID pBlock = (char*)malloc(FSize);           // адрес буфера для ресурсов версии
  GetFileVersionInfo(FileName,NULL,FSize,pBlock); // получаем ресурс информации о версии
  LPVOID MS;
  UINT LS;

  try
  {
	VerQueryValue(pBlock,"\\",&MS,&LS);         // извлекаем информацию из ресурса
  }

  catch(...)
  {
	return false;                               // в случае ошибки функция неуспешна
  }

  VS_FIXEDFILEINFO FixedFileInfo;                 // структура с информацией о версии файла
  memmove(&FixedFileInfo, MS, LS);                // приводим информацию к структуре

  DWORD FileVersionMS = FixedFileInfo.dwFileVersionMS;
  DWORD FileVersionLS = FixedFileInfo.dwFileVersionLS;

  VerInfo[0] = HIWORD(FileVersionMS);             // получаем значения
  VerInfo[1] = LOWORD(FileVersionMS);             // и присваиваем их входному указателю
  VerInfo[2] = HIWORD(FileVersionLS);
  VerInfo[3] = LOWORD(FileVersionLS);

  return true;                                    // функция успешна
}
//---------------------------------------------------------------------------
/*
Запрос: сравнение версий программ c++ builder
http://rxlib.ru/forums/index.php?act=ST&f=3&t=2305&s=ded848ac6abe6afafadeb852a5733406
*/
template <class T>
class GlobalMem
{
  public:
	GlobalMem(DWORD s):size(s){buf = (T) GlobalAlloc(GMEM_FIXED, size);}
	~GlobalMem(){GlobalFree(buf);}
	T operator()(){return buf;}
  private:
	T buf;
    DWORD size;
};

AnsiString __fastcall TMainForm::GetAnyAppParam(AnsiString appname,AnsiString pname)
{
//pname = ProductName,FileVersion,LegalCopyright,CompanyName и т.д.
AnsiString ret("<Invalid parametr>");
DWORD h;
DWORD Size = GetFileVersionInfoSize(appname.c_str(), &h);
if (Size == 0) return ret;

GlobalMem<char*> buf(Size);

if (GetFileVersionInfo(appname.c_str(), h, Size, buf()) == 0) return ret;

char* ValueBuf;
UINT Len;
VerQueryValue(buf(), "\\VarFileInfo\\Translation", &(void *) ValueBuf, &Len);
if (Len < 4) return ret;

AnsiString CharSet = IntToHex((int)MAKELONG(*(int*) (ValueBuf + 2), *(int*) ValueBuf),8);
AnsiString fn = "\\StringFileInfo\\" + CharSet + "\\"+pname;

if (VerQueryValue(buf(),fn.c_str(),&(void *) ValueBuf, &Len) != 0)
 ret = ValueBuf;

return ret;
}
//---------------------------------------------------------------------------
/*
Запрос: получить информацию о версии программы builder c++
http://www.cyberforum.ru/cpp-builder/thread947644.html
*/
String __fastcall TMainForm::GetVer(String FileName)
{
    AnsiString Version;
	DWORD h;

wchar_t* WFileName = FileName.c_str();
char* CFileName;
sprintf(CFileName, "%S", WFileName);

	DWORD Size = GetFileVersionInfoSize(CFileName, &h);
    if(Size == 0)
    {
        Version = "неизвестно";
        return Version;
    }
    char *buf;
	buf = (char *)GlobalAlloc(GMEM_FIXED, Size);
	if(GetFileVersionInfo(CFileName, h, Size, buf)!=0)
    {
        char *ValueBuf;
		UINT Len;
		VerQueryValue(buf, "\\VarFileInfo\\Translation", &(void *)ValueBuf, &Len);
        if(Len>=4)
        {
            String CharSet = IntToHex((int )MAKELONG(*(int *)(ValueBuf + 2), *(int *)ValueBuf), 8);
            AnsiString lpSubBlock = String("\\StringFileInfo\\"+CharSet+"\\FileVersion");
            if( VerQueryValueA( buf,
                               lpSubBlock.c_str(),
                               &(void *)ValueBuf,
                               &Len )
               )
               Version = ValueBuf;
        }
    }
    GlobalFree(buf);
	return Version;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Button1Click(TObject *Sender)
{

GetAppVersion("Birthday.exe", VerInfo);
Memo1->Lines->Add(VerInfo[0]);
Memo1->Lines->Add(VerInfo[1]);
Memo1->Lines->Add(VerInfo[2]);
Memo1->Lines->Add(VerInfo[3]);


//Label1->Caption=GetVer("Birthday.exe");
//Label1->Caption = GetAnyAppParam("Birthday.exe","FileVersion");
}
//---------------------------------------------------------------------------

